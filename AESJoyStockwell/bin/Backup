import javax.xml.bind.DatatypeConverter;

public class KeyScheduler {
	
	char[] keyArr;
	char[][][] keyMatrixSmall;
	String[][][] keyMatrixBig;
	String[][] sBox = {{"63","7c","77","7b","f2","6b","6f","c5","30","01","67","2b","fe","d7","ab","76"},
			{"ca","82","c9","7d","fa","59","47","f0","ad","d4","a2","af","9c","a4","72","c0"},
			{"b7","fd","93","26","36","3f","f7","cc","34","a5","e5","f1","71","d8","31","15"},
			{"04","c7","23","c3","18","96","05","9a","07","12","80","e2","eb","27","b2","75"},
			{"09","83","2c","1a","1b","6e","5a","a0","52","3b","d6","b3","29","e3","2f","84"},
			{"53","d1","00","ed","20","fc","b1","5b","6a","cb","be","39","4a","4c","58","cf"},
			{"d0","ef","aa","fb","43","4d","33","85","45","f9","02","7f","50","3c","9f","a8"},
			{"51","a3","40","8f","92","9d","38","f5","bc","b6","da","21","10","ff","f3","d2"},
			{"cd","0c","13","ec","5f","97","44","17","c4","a7","7e","3d","64","5d","19","73"},
			{"60","81","4f","dc","22","2a","90","88","46","ee","b8","14","de","5e","0b","db"},
			{"e0","32","3a","0a","49","06","24","5c","c2","d3","ac","62","91","95","e4","79"},
			{"e7","c8","37","6d","8d","d5","4e","a9","6c","56","f4","ea","65","7a","ae","08"},
			{"ba","78","25","2e","1c","a6","b4","c6","e8","dd","74","1f","4b","bd","8b","8a"},
			{"70","3e","b5","66","48","03","f6","0e","61","35","57","b9","86","c1","1d","9e"},
			{"e1","f8","98","11","69","d9","8e","94","9b","1e","87","e9","ce","55","28","df"},
			{"8c","a1","89","0d","bf","e6","42","68","41","99","2d","0f","b0","54","bb","16"}};

	
	public KeyScheduler(String keyStr, char[][][] keyMatrixSmall, String[][][] keyMatrixBig)
	{
		this.keyArr = keyStr.toCharArray();
		this.keyMatrixSmall = keyMatrixSmall;
		this.keyMatrixBig = keyMatrixBig;
	}

	// get the 4 * 44 matrix that will be used to get the round keys
	public void setKeyMatrixBig(boolean debug) {
		// fill in the first 4 columns with keyMatrixSmall
		// start with 0x0 so DatatypeConverter works on it later
		for(int col = 0; col < 4; col++)
			for (int row = 0; row < 4; row++)
			{
				String str0 = "0" + Character.toString(this.keyMatrixSmall[row][col][0]);
				String str1 = "0" + Character.toString(this.keyMatrixSmall[row][col][1]);
				this.keyMatrixBig[row][col][0] = str0;
				this.keyMatrixBig[row][col][1] = str1;
			}
		
		if(debug) {
			System.out.println("the matrix from which we'll take round keys so far");
			for (int r = 0; r < 4; r++){
				for(int c = 0; c < 44; c++)
				{
					System.out.print(this.keyMatrixBig[r][c][0]);
					System.out.print(this.keyMatrixBig[r][c][1]);
					System.out.print(" ");
				}
				System.out.println();
			}
		}
		
		for (int col = 4; col < 44; col++){
			byte[] xor0 = new byte[1];
			byte[] xor1 = new byte[1];
			// if the col isn't a multiple of 4, just copy col - 1 and xor with col - 4
			if (col % 4 != 0) {
				for (int row = 0; row < 4; row++){
					// first nibble of col - 1
					String forParser = this.keyMatrixBig[row][col - 1][0];
					if (debug){
						System.out.println("forParser10: " + forParser);
						System.out.println("row: " + row);
						System.out.println("col: " + col);
					}
					byte[] nib01 = DatatypeConverter.parseHexBinary(forParser);
					// second next of col - 1
					forParser = this.keyMatrixBig[row][col - 1][1];
					if (debug) System.out.println("forParser11: " + forParser);
					byte[] nib11 = DatatypeConverter.parseHexBinary(forParser);
					// first nibble of col - 4
					forParser = this.keyMatrixBig[row][col - 4][0];
					byte[] nib04 = DatatypeConverter.parseHexBinary(forParser);
					// second nibble of col - 4
					forParser = this.keyMatrixBig[row][col - 4][1];
					byte[] nib14 = DatatypeConverter.parseHexBinary(forParser);
					//get xors of nibbles in columns
					for (int i = 0; i < nib01.length; i++) {
						xor0[i] = (byte) (nib01[i] ^ nib04[i]);
					}
					for (int i = 0; i < nib11.length; i++) {
						xor1[i] = (byte) (nib11[i] ^ nib14[i]);
					}
					// set the entry in col to their xor
					this.keyMatrixBig[row][col][0] = DatatypeConverter.printHexBinary(xor0);
					this.keyMatrixBig[row][col][1] = DatatypeConverter.printHexBinary(xor1);
					if(debug) {
						System.out.println("the matrix from which we'll take round keys so far");
						for (int r = 0; r < 4; r++){
							for(int c = 0; c < 44; c++)
							{
								System.out.print(this.keyMatrixBig[r][c][0]);
								System.out.print(this.keyMatrixBig[r][c][1]);
								System.out.print(" ");
							}
							System.out.println();
						}
					}
				}
			} // otherwise, if the col number is divisible by 4 
			else {
				// bump up each row from the last column; put old top on bottom
				keyMatrixBig[0][col][0] = keyMatrixBig[1][col - 1][0];
				keyMatrixBig[0][col][1] = keyMatrixBig[1][col - 1][1];
				keyMatrixBig[1][col][0] = keyMatrixBig[2][col - 1][0];
				keyMatrixBig[1][col][1] = keyMatrixBig[2][col - 1][1];
				keyMatrixBig[2][col][0] = keyMatrixBig[3][col - 1][0];
				keyMatrixBig[2][col][1] = keyMatrixBig[3][col - 1][1];
				keyMatrixBig[3][col][0] = keyMatrixBig[0][col - 1][0];
				keyMatrixBig[3][col][1] = keyMatrixBig[0][col - 1][1];;
				for (int row = 0; row < 4; row++) {
					// sboxes: nibble 0 choose column, nibble 1 chooses row
					int sBoxRow = DatatypeConverter.parseHexBinary(keyMatrixBig[row][col][1])[0];
					int sBoxCol = DatatypeConverter.parseHexBinary(keyMatrixBig[row][col][0])[0];
					String sBoxVal = this.sBox[sBoxRow][sBoxCol];
					// xor with round const, where round is col/4 since each round needs 4 cols
					int round = col/4;
					String consts = this.roundConst(round);
					// to get the byte at keyMatrixBig[row][col] from the 2 strings representing nibbles:
					// convert to byte arrays of length 1, take first elems,
					// left-shift 0th nibble so it will come, xor to combine with the 0th nibble before
					// 0th char is first nibble, 1st char is the next
					byte nib0 = DatatypeConverter.parseHexBinary(sBoxVal.substring(0, 1))[0];
					byte nib1 = DatatypeConverter.parseHexBinary(sBoxVal.substring(1))[0];
					int shiftnib0 = nib0 << 4;
					int wholeByte = shiftnib0 ^ nib1;
					int xoredWithConst = wholeByte ^ DatatypeConverter.parseHexBinary(consts)[0];
					// xor with col - 4; get col - 4 val, then xor
					byte nib04 = DatatypeConverter.parseHexBinary(keyMatrixBig[row][col - 4][1])[0];
					byte nib14 = DatatypeConverter.parseHexBinary(keyMatrixBig[row][col - 4][1])[0];
					int shiftnib04 = nib04 << 4;
					int wholeByte4 = shiftnib04 ^ nib14;
					int putInMatrix = xoredWithConst ^ wholeByte4;
					//put the result of all the xors into the matrix
					String matrVal0 = 
					String matrVal1 = 
					keyMatrixBig[row][col][1] = 
				}
			}
		}
		
		if(debug) {
			System.out.println("the matrix from which we'll take round keys");
			for (int row = 0; row < 4; row++){
				for(int col = 0; col < 44; col++)
				{
					System.out.print(this.keyMatrixBig[row][col][0]);
					System.out.print(this.keyMatrixBig[row][col][1]);
					System.out.print(" ");
				}
				System.out.println();
			}
		}
	}
	
	public String roundConst(int round) {
		// constant list courtesy wikipedia
		String[] consts = {"no round zero", "01", "02",	"04", "08", "10", "20", "40", "80", "1B", "36"};
		return consts[round];
	}
	
	// turn the key into matrix form
	public void setKeyMatrixSmall(boolean debug) {
		int nextnib = 0;
		for(int col = 0; col < 4; col++)
			for (int row = 0; row < 4; row++)
			{
				this.keyMatrixSmall[row][col][0] = this.keyArr[nextnib];
				nextnib++;
				this.keyMatrixSmall[row][col][1] = this.keyArr[nextnib];
				nextnib++;
			}
		if(debug) {
			System.out.println("the key turned into a 4*4 matrix");
			for (int row = 0; row < 4; row++){
				for(int col = 0; col < 4; col++)
				{
					System.out.print(this.keyMatrixSmall[row][col][0]);
					System.out.print(this.keyMatrixSmall[row][col][1]);
					System.out.print(" ");
				}
				System.out.println();
			}
		}
	}
	
}
